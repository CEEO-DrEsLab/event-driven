<!--
	Table Test Layout
	By: Benjamin Zackin
	Last Modified: 7/14/2016
-->

<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Table Test Layout</title>
	<style> 
		* {
			margin:0px;
		}
		/*Set up Port View table styles*/
		#portView, #portView th, #portView td {
			border:1px solid black;
		}
		#portView {
			border-collapse:collapse;
		}
		#portView th {
			border-bottom:0px none;
		}
		#portView td {
			border-top:0px none;
			border-bottom:1px solid black;
		}

		/*Set up Link Pair table styles*/
		.linkPair {
			border-collapse:collapse;
			margin-top:10px;
			height: 100%;
		}
		.linkPair td
		{
			vertical-align:top;
			min-width:222px;
			min-height:90px;
			margin:0px;
			font-weight:bold;
			border:1px solid red;
			height: 100%;
		}
		.triggerSocket {
			min-width:200px;
			min-height:90px;
			margin:0px;
			background-color:green;
			font-weight:bold;
			border:1px dashed white;
			height: 100%;
		}
		.actionSocket {
			min-width:200px;
			min-height:90px;
			margin:0px;
			background-color:blue;
			font-weight:bold;
			border:1px dashed white;
			height:100%;
		}
		.triggerBlock {
			top:0px;
			bottom:0px;
			min-width:200px;
			min-height:50px;
			margin:10px;
			background-color:lightgreen;
			font-weight:bold;
		}
		.actionBlock {
			top:0px;
			bottom:0px;
			min-width:200px;
			min-height:50px;
			margin:10px;
			background-color:skyblue;
			font-weight:bold;

		}
		.newTrigger {
			margin:10px;
			float:left;
		}
		.newAction {
			margin:10px;
		}
		.codeScreen {
			width:100%;
		}
	</style>
</head>

<body>
	<div id="header">
		<h1>Interface Trial 2: Tables</h1>
	</div>

	<div id="nav">
		<button onclick="location.reload()">New</button>
		<button onclick="window.open('file:///Users/Zackin/Dropbox/Tufts/Sophomore%20Year/CEEO%20Summer%202016/table_test_layout')">Open</button>
		<button>Save</button>
		<button>Print</button>
		<button>Deploy</button>
		<button >Run</button>
		<button>Stop</button>
	</div>

	<div>
		<table id="portView">
			<caption>PORT VIEW</caption>
			<tr>
				<th>Port 1 </th>
				<th>Port 2</th>
				<th>Port 3</th>
				<th>Port 4</th>
			</tr>
			<tr>
				<td>NONE</td>
				<td>NONE</td>
				<td>NONE</td>
				<td>NONE</td>
			</tr>
			<tr>
				<th>Port A</th>
				<th>Port B</th>
				<th>Port C</th>
				<th>Port D</th>
			</tr>
			<tr>
				<td>NONE</td>
				<td>NONE</td>
				<td>NONE</td>
				<td>NONE</td>
			</tr>
		</table>
	</div>

<div id="codeScreen" onstart="setScreen()"></div>
<button class="newTrigger" onclick="newTable()">Click to Add a Trigger</button>
	
	

	<script>
		function setScreen() {
			var  codingScreen = document.createElement("div");
			codingScreen.className = "codeScreen";
			return;
		}

		var triggerCounter = 0;

		function newTable() {
			console.log("trigger button pressed!");
			var tableScreen = document.getElementById("codeScreen");
			var thisTable = document.createElement("table");
			thisTable.className = "linkPair";
			var tr = document.createElement("tr");
			var td0 = document.createElement("td");
			td0.style.backgroundColor = "green"; // color triggers green
			td0.rowSpan = "100"; // arbitrarily large number
			//th0.innerHTML = "This is a Trigger Block!";
			td0 = makeSocket(td0,triggerCounter,triggerCounter, true);
			tr.appendChild(td0);

			var td1 = document.createElement("td");
			td1.style.backgroundColor = "blue"; // color actions blue
			var button = makeButton(triggerCounter, true);	
			td1.appendChild(button);

			tr.appendChild(td1);
			thisTable.appendChild(tr);
			tableScreen.appendChild(thisTable);
			console.log("new trigger created!");
			console.log("trigger counter = "+ triggerCounter);
			return;
		}

		function newRow(tableID) {
			console.log("action button pressed in table number " + tableID +"!");
			var thisTable = document.getElementsByClassName("linkPair")[tableID];
			console.log(thisTable);

			var numRows = thisTable.rows.length;
			console.log("This table has " + numRows + " rows");
			thisTable.rows[numRows-1].lastChild.innerHTML= "";
			thisTable.rows[numRows-1].lastChild = makeSocket(thisTable.rows[numRows-1].lastChild,tableID,numRows-1,false);
			
			
			var row = thisTable.insertRow(numRows);

			var cell1 = document.createElement("td");
			cell1.style.backgroundColor = "blue";
			var newButton = makeButton(tableID, false);
			cell1.appendChild(newButton);
			row.appendChild(cell1);
			return;
		}

		function makeButton(idNum, isTrig){
			var button = document.createElement("button");
			button.setAttribute("name", "actionButton");
			button.innerHTML = "Click to add an Action";
			button.className = "newAction";
			if (isTrig) {
				button.setAttribute("id", triggerCounter++);
			}
			else {
				button.setAttribute("id", idNum);
			}
			button.setAttribute("onclick","newRow(this.id)");
			return button;
		}


		function makeSocket(mountLoc,tableID,idNum,isTrig) {
			var socket = document.createElement("div");
			if (isTrig) {
				socket.className = "triggerSocket";
				var idTxt = "tSock" + idNum+"@Tab" + tableID;
				socket.setAttribute("id", idTxt);
				socket.setAttribute("ondrop","drop(event)");
				socket.setAttribute("ondragover","allowDrop(event)");
				socket.style.height = ""
				socket.innerHTML = idTxt;
				socket = makeDragBlock(socket,tableID,idNum, true);
			}
			else {
				socket.className = "actionSocket";
				var idTxt = "aSock" + idNum + "@Tab" + tableID;
				socket.setAttribute("id", idTxt);
				socket.setAttribute("ondrop","drop(event)");
				socket.setAttribute("ondragover","allowDrop(event)");
				socket.innerHTML = idTxt;
				socket = makeDragBlock(socket,tableID,idNum, false);
			}
			mountLoc.appendChild(socket);
			return mountLoc;
		}


		function makeDragBlock(startSocket,tableID,idNum,isTrig) {
			var dragBlock = document.createElement("div");
			if (isTrig) {
				dragBlock.className = "triggerBlock";
				var idTxt = "tDrag" + idNum + "@Tab" + tableID;
			}
			else {
				dragBlock.className = "actionBlock";
				var idTxt = "aDrag" + idNum + "@Tab" + tableID;
				
			}
			dragBlock.setAttribute("id", idTxt);
			dragBlock.setAttribute("draggable","true");
			dragBlock.setAttribute("ondragstart","drag(event)");
			console.log(dragBlock);

			dragBlock.setAttribute("ondrop", "disableDrop(event)");// disable inherited socket properties
			dragBlock.setAttribute("ondragover", "disableDrop(event)");// disable inherited socket properties
			
			console.log(dragBlock);
			dragBlock.innerHTML = idTxt;
			startSocket.appendChild(dragBlock);
			return startSocket;
		}

		function allowDrop(ev) {
			ev.preventDefault();
			console.log("allowDrop()");
			console.log(this);
		}
		function drag(ev) {
			ev.dataTransfer.setData("text", ev.target.id);
			console.log("drag()");
			console.log(this);
		}
		function drop(ev) {
			ev.preventDefault();
   			var data = ev.dataTransfer.getData("text");
    		ev.target.appendChild(document.getElementById(data));
    		console.log("drop()");
			console.log(this);
		}
		function disableDrop(ev) {
			ev.stopPropagation()
		}
	</script>
</body>
</html>
